1	新建动态web工程


2	添加jar包

3	进行springmvc+spring+springdatajpa的整合，SSSP

	3.1	配置springmvc所需要的配置文件,在web.xml里面添加如下内容
	<servlet>
		<servlet-name>springDispatcherServlet</servlet-name>
		<servlet-class>org.springframework.web.servlet.DispatcherServlet</servlet-class>
	</servlet>
	<servlet-mapping>
		<servlet-name>springDispatcherServlet</servlet-name>
		<url-pattern>/</url-pattern>
	</servlet-mapping>
	
	3.2	新建springDispatcherServlet-servlet.xml文件并进行springmvc相关的配置
	<context:component-scan base-package="com.atguigu.sssp" use-default-filters="false">
		<context:include-filter type="annotation" expression="org.springframework.stereotype.Controller"/>
		<context:include-filter type="annotation" expression="org.springframework.web.bind.annotation.ControllerAdvice"/>
	</context:component-scan>

	<bean class="org.springframework.web.servlet.view.InternalResourceViewResolver">
		<property name="prefix" value="/WEB-INF/pages/"></property>
		<property name="suffix" value=".jsp"></property>
	</bean>
	
	<mvc:default-servlet-handler/>
	<mvc:annotation-driven></mvc:annotation-driven>

	3.3	新建applicationContext.xml配置文件并在web.xml里面进行spring相关的配置
	<!-- spring相关配置 -->
	<context-param>
		<param-name>contextConfigLocation</param-name>
		<param-value>classpath:applicationContext.xml</param-value>
	</context-param>
	<listener>
		<listener-class>org.springframework.web.context.ContextLoaderListener</listener-class>
	</listener>

	3.4	对applicationContext.xml进行自身配置+整合JPA
	
	3.4.1	配置自动扫描的包
	<!-- 配置自动扫描的包 -->
	<context:component-scan base-package="com.atguigu.sssp">
		<context:exclude-filter type="annotation" expression="org.springframework.stereotype.Controller"/>
		<context:exclude-filter type="annotation" expression="org.springframework.web.bind.annotation.ControllerAdvice"/>
	</context:component-scan>
	
	3.4.2	新建db.properties
	jdbc.user=root
	jdbc.password=123456
	jdbc.driverClass=com.mysql.jdbc.Driver
	jdbc.jdbcUrl=jdbc:mysql://localhost:3306/spring7?useUnicode=true&amp;characterEncoding=UTF8
	
	3.4.3	配置数据源
	<!-- 配置数据源 -->
	<context:property-placeholder location="classpath:db.properties"/>
	<bean id="dataSource" class="com.mchange.v2.c3p0.ComboPooledDataSource">
		<property name="user" 			value="${jdbc.user}"></property>
		<property name="password" 		value="${jdbc.password}"></property>
		<property name="driverClass" 	value="${jdbc.driverClass}"></property>
		<property name="jdbcUrl" 		value="${jdbc.jdbcUrl}"></property>	
	</bean>
	
	3.4.4	配置 EntityManagerFactory 实例+开启二级缓存配置
	<!-- 配置 EntityManagerFactory 实例 -->
	<bean id="entityManagerFactory"
		class="org.springframework.orm.jpa.LocalContainerEntityManagerFactoryBean">
		<property name="dataSource" ref="dataSource"></property>
		<property name="jpaVendorAdapter">
			<bean class="org.springframework.orm.jpa.vendor.HibernateJpaVendorAdapter"></bean>
		</property>	
		<property name="packagesToScan" value="com.atguigu.sssp"></property>
		<property name="jpaProperties">
			<props>
				<prop key="hibernate.ejb.naming_strategy">org.hibernate.cfg.ImprovedNamingStrategy</prop>
				
				<prop key="hibernate.hbm2ddl.auto">update</prop>
				<prop key="hibernate.show_sql">true</prop>
				<prop key="hibernate.format_sql">true</prop>
				<prop key="hibernate.dialect">org.hibernate.dialect.MySQL5InnoDBDialect</prop>
				
				<prop key="hibernate.cache.use_second_level_cache">true</prop>
				<prop key="hibernate.cache.region.factory_class">org.hibernate.cache.ehcache.EhCacheRegionFactory</prop>
				<prop key="hibernate.cache.use_query_cache">true</prop>
			</props>
		</property>
		<!-- 开启JPA二级缓存 -->
		<property name="sharedCacheMode" value="ENABLE_SELECTIVE"></property>
	</bean>
	
	3.4.5	配置事务
	<!-- 配置事务管理器 -->
	<bean id="transactionManager"
		class="org.springframework.orm.jpa.JpaTransactionManager">
		<property name="entityManagerFactory" ref="entityManagerFactory"></property>	
	</bean>
	<!-- 配置支持基于注解的事务 -->
	<tx:annotation-driven/>
	
	3.4.6	配置springdata
	<!-- 配置 SpringData -->
	<jpa:repositories base-package="com.atguigu.sssp"
		entity-manager-factory-ref="entityManagerFactory"></jpa:repositories>

4	添加二级缓存ehcache.xml到src目录下

5	根据springmvc的配置，/WEB-INF下面新建文件夹pages

6	WebContent下面新建scripts文件夹和jquery脚本

7	进一步加强web.xml配置文件的功能，加强配置

	7.1 characterEncodingFilter
	<!-- 配置解决中文乱码 ，我在最前-->
	<filter>
		<filter-name>characterEncodingFilter</filter-name>
		<filter-class>org.springframework.web.filter.CharacterEncodingFilter</filter-class>
	        <init-param>  
	            <param-name>encoding</param-name>  
	            <param-value>UTF-8</param-value>  
	        </init-param>  
	        <init-param>  
	            <param-name>forceEncoding</param-name>  
	            <param-value>true</param-value>  
	        </init-param>		
	</filter>
	<filter-mapping>
		<filter-name>characterEncodingFilter</filter-name>
		<url-pattern>/*</url-pattern>
	</filter-mapping>

	7.2	HiddenHttpMethodFilter
	<!-- 配置可以把 POST 请求转为 DELETE、PUT 请求的 Filter -->
	<filter>
		<filter-name>HiddenHttpMethodFilter</filter-name>
		<filter-class>org.springframework.web.filter.HiddenHttpMethodFilter</filter-class>
	</filter>
	<filter-mapping>
		<filter-name>HiddenHttpMethodFilter</filter-name>
		<url-pattern>/*</url-pattern>
	</filter-mapping>
	
	7.3	解决openSessionInView
	<!-- 使用 JPA 对应的 OpenEntityManagerInViewFilter -->
	<filter>
		<filter-name>OpenEntityManagerInViewFilter</filter-name>
		<filter-class>org.springframework.orm.jpa.support.OpenEntityManagerInViewFilter</filter-class>
	</filter>
	<filter-mapping>
		<filter-name>OpenEntityManagerInViewFilter</filter-name>
		<url-pattern>/*</url-pattern>
	</filter-mapping>

8	新建com.atguigu.sssp包和index.jsp页面，具体参看程序

==============================================================================================================================
业务编码关键点:
1. Spring 的 IOC 容器不扫描 @Controller 和 @ControllerAdvice 注解的类. 
而 SpringMVC 的 IOC 容器则只扫描的 @Controller 和 @ControllerAdvice 注解的类. 

2. 配置 OpenEntityManagerInViewFilter, 作用同 OpenSessionInViewFilter. 可以解决页面上关联属性懒加载异常的问题

3. 使用二级缓存

4. 为 Employee 的 birth 添加 @DateTimeFormat(pattern="yyyy-MM-dd") 注解. 
   也可以把指定格式的字符串转为 Date 类型. 

5. Employee 的 createTime 是不能被修改的!

6. Employee 和 Department 之间是单向 n-1 的关联关系. 

7. Dao 层使用 SpringData. 
1). EmployeeRepository 中不需要添加任何的方法
2). DepartmentRepository 中为了使用二级缓存缓存查询的 Department, 所以需要自定义个 getAll 方法.

@Query("FROM Department d")
List<Department> getAll();

注意: 为了使用二级缓存, 还需要在实体类上添加 @Cachable 注解: @Cacheable


	do  it   .......